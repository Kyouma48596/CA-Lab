$date
	Sun Mar 27 15:11:00 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module processor_top_test $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$scope module proc $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 # sign_extend_out [31:0] $end
$var wire 32 $ regfilemux_out [31:0] $end
$var wire 32 % regfile_out_r9 [31:0] $end
$var wire 32 & regfile_out_r8 [31:0] $end
$var wire 32 ' regfile_out_r4 [31:0] $end
$var wire 32 ( regfile_out_r13 [31:0] $end
$var wire 32 ) regfile_out_r11 [31:0] $end
$var wire 32 * regfile_out_r10 [31:0] $end
$var wire 32 + regfile_out_r0 [31:0] $end
$var wire 32 , instr [31:0] $end
$var wire 32 - alumux_out [31:0] $end
$var wire 32 . alu_res [31:0] $end
$var wire 32 / alu_in2 [31:0] $end
$var wire 32 0 alu_in1 [31:0] $end
$var wire 1 1 Zero $end
$var wire 1 2 Shift $end
$var wire 1 3 RegWrite $end
$var wire 32 4 PC_out [31:0] $end
$var wire 32 5 PC_in [31:0] $end
$var wire 1 6 ImmSel $end
$var wire 4 7 ALUop [3:0] $end
$scope module ALUmux $end
$var wire 32 8 in2 [31:0] $end
$var wire 1 2 sel $end
$var wire 32 9 q [31:0] $end
$var wire 32 : in1 [31:0] $end
$upscope $end
$scope module alu $end
$var wire 32 ; B [31:0] $end
$var wire 4 < cntrl [3:0] $end
$var wire 1 1 Zero $end
$var wire 32 = Result [31:0] $end
$var wire 32 > A [31:0] $end
$var reg 32 ? res [31:0] $end
$upscope $end
$scope module contr0 $end
$var wire 6 @ funct [5:0] $end
$var wire 6 A opcode [5:0] $end
$var reg 4 B ALUop [3:0] $end
$var reg 1 6 ImmSel $end
$var reg 1 2 Shift $end
$var reg 1 3 regWrite $end
$upscope $end
$scope module file0 $end
$var wire 1 ! clk $end
$var wire 32 C read_data_1 [31:0] $end
$var wire 32 D read_data_2 [31:0] $end
$var wire 5 E read_reg_num_1 [4:0] $end
$var wire 5 F read_reg_num_2 [4:0] $end
$var wire 32 G regfile_out_r0 [31:0] $end
$var wire 32 H regfile_out_r10 [31:0] $end
$var wire 32 I regfile_out_r11 [31:0] $end
$var wire 32 J regfile_out_r13 [31:0] $end
$var wire 32 K regfile_out_r4 [31:0] $end
$var wire 32 L regfile_out_r8 [31:0] $end
$var wire 32 M regfile_out_r9 [31:0] $end
$var wire 1 " rst $end
$var wire 1 3 writeReg $end
$var wire 5 N write_reg_num [4:0] $end
$var wire 32 O write_data [31:0] $end
$var integer 32 P i [31:0] $end
$upscope $end
$scope module mem0 $end
$var wire 1 " reset $end
$var wire 32 Q instruction_code [31:0] $end
$var wire 32 R PC [31:0] $end
$upscope $end
$scope module pc0 $end
$var wire 32 S PC_out [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 T PC_in [31:0] $end
$var reg 32 U PC [31:0] $end
$upscope $end
$scope module pc_add0 $end
$var wire 32 V pc [31:0] $end
$var wire 32 W next [31:0] $end
$upscope $end
$scope module regfilemux $end
$var wire 32 X in1 [31:0] $end
$var wire 1 6 sel $end
$var wire 32 Y q [31:0] $end
$var wire 32 Z in2 [31:0] $end
$upscope $end
$scope module sign $end
$var wire 21 [ in [20:0] $end
$var wire 32 \ out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
b0xxxxx 8
bx 7
x6
bx 5
bx 4
x3
x2
x1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
bx %
bx $
bx #
1"
0!
$end
#1000
b10 $
b10 O
b10 Y
01
b10 .
b10 =
b10 ?
b10 X
b1 -
b1 9
b1 ;
02
b10 7
b10 <
b10 B
06
13
b100000 @
b0 8
b1 /
b1 :
b1 D
b10 F
b10001000000100000 #
b10001000000100000 Z
b10001000000100000 \
b10001000000100000 [
b1 0
b1 >
b1 C
b1 E
b0 A
b0 N
b1 (
b1 J
b1 )
b1 I
b1 *
b1 H
b1 %
b1 M
b1 &
b1 L
b1 '
b1 K
b1 +
b1 G
b100 5
b100 T
b100 W
b10001000000100000 ,
b10001000000100000 Q
b0 4
b0 R
b0 S
b0 U
b0 V
b100000 P
0"
#2000
1"
#5000
b0 $
b0 O
b0 Y
11
b0 .
b0 =
b0 ?
b0 X
b110 7
b110 <
b110 B
b100010 @
b110 F
b1010011000000100010 #
b1010011000000100010 Z
b1010011000000100010 \
b1010011000000100010 [
b100 N
b101 E
b1000 5
b1000 T
b1000 W
b100001010011000000100010 ,
b100001010011000000100010 Q
b100 4
b100 R
b100 S
b100 U
b100 V
b10 +
b10 G
1!
#10000
0!
#15000
b1 $
b1 O
b1 Y
01
b1 .
b1 =
b1 ?
b1 X
b0 7
b0 <
b0 B
b100100 @
b1010 F
b10010101000000100100 #
b10010101000000100100 Z
b10010101000000100100 \
b10010101000000100100 [
b1001 E
b1000 N
b1100 5
b1100 T
b1100 W
b1000010010101000000100100 ,
b1000010010101000000100100 Q
b1000 4
b1000 R
b1000 S
b1000 U
b1000 V
b0 '
b0 K
1!
#20000
0!
#25000
b1 7
b1 <
b1 B
b100101 @
b10000101000000100101 #
b10000101000000100101 Z
b10000101000000100101 \
b10000101000000100101 [
b1001 N
b1000 E
b10000 5
b10000 T
b10000 W
b1001010000101000000100101 ,
b1001010000101000000100101 Q
b1100 4
b1100 R
b1100 S
b1100 U
b1100 V
1!
#30000
0!
#35000
b1000000 $
b1000000 O
b1000000 Y
b1000000 .
b1000000 =
b1000000 ?
b1000000 X
12
b1001 7
b1001 <
b1001 B
b110 -
b110 9
b110 ;
b0 @
b110 8
b10 /
b10 :
b10 D
b0 F
b1100000000110000000 #
b1100000000110000000 Z
b1100000000110000000 \
b1100000000110000000 [
b1011 N
b110 E
b10100 5
b10100 T
b10100 W
b1011001100000000110000000 ,
b1011001100000000110000000 Q
b10000 4
b10000 R
b10000 S
b10000 U
b10000 V
1!
#40000
0!
#45000
b0 $
b0 O
b0 Y
11
b0 .
b0 =
b0 ?
b0 X
b1010 7
b1010 <
b1010 B
b1010 -
b1010 9
b1010 ;
b10 @
b1010 8
b10010000001010000010 #
b10010000001010000010 Z
b10010000001010000010 \
b10010000001010000010 [
b1101 N
b1001 E
b11000 5
b11000 T
b11000 W
b1101010010000001010000010 ,
b1101010010000001010000010 Q
b10100 4
b10100 R
b10100 S
b10100 U
b10100 V
b1000000 )
b1000000 I
1!
#50000
0!
#55000
b1010101010101010101 $
b1010101010101010101 O
b1010101010101010101 Y
01
b1 .
b1 =
b1 ?
b1 X
b1 -
b1 9
b1 ;
16
02
b0 7
b0 <
b0 B
b10101 @
b10101 8
b1 /
b1 :
b1 D
b1010 F
b1010101010101010101 #
b1010101010101010101 Z
b1010101010101010101 \
b1010101010101010101 [
b1010 N
b101 E
b111111 A
b11100 5
b11100 T
b11100 W
b11111101010001010101010101010101 ,
b11111101010001010101010101010101 Q
b11000 4
b11000 R
b11000 S
b11000 U
b11000 V
b0 (
b0 J
1!
#60000
0!
#65000
bx $
bx O
bx Y
x1
bx .
bx =
bx ?
bx X
03
06
bx @
b0xxxxx 8
bx F
bx #
bx Z
bx \
bx [
bx 0
bx >
bx C
bx E
bx A
bx N
b100000 5
b100000 T
b100000 W
bx ,
bx Q
b11100 4
b11100 R
b11100 S
b11100 U
b11100 V
bx -
bx 9
bx ;
bx /
bx :
bx D
b1010101010101010101 *
b1010101010101010101 H
1!
#70000
0!
#75000
b100100 5
b100100 T
b100100 W
b100000 4
b100000 R
b100000 S
b100000 U
b100000 V
1!
#80000
0!
#85000
b101000 5
b101000 T
b101000 W
b100100 4
b100100 R
b100100 S
b100100 U
b100100 V
1!
#90000
0!
#95000
b101100 5
b101100 T
b101100 W
b101000 4
b101000 R
b101000 S
b101000 U
b101000 V
1!
#100000
0!
#105000
b110000 5
b110000 T
b110000 W
b101100 4
b101100 R
b101100 S
b101100 U
b101100 V
1!
#110000
0!
#115000
b110100 5
b110100 T
b110100 W
b110000 4
b110000 R
b110000 S
b110000 U
b110000 V
1!
#120000
0!
#125000
b111000 5
b111000 T
b111000 W
b110100 4
b110100 R
b110100 S
b110100 U
b110100 V
1!
#130000
0!
#135000
b111100 5
b111100 T
b111100 W
b111000 4
b111000 R
b111000 S
b111000 U
b111000 V
1!
#140000
0!
#145000
b1000000 5
b1000000 T
b1000000 W
b111100 4
b111100 R
b111100 S
b111100 U
b111100 V
1!
#150000
0!
#155000
b1000100 5
b1000100 T
b1000100 W
b1000000 4
b1000000 R
b1000000 S
b1000000 U
b1000000 V
1!
#160000
0!
#165000
b1001000 5
b1001000 T
b1001000 W
b1000100 4
b1000100 R
b1000100 S
b1000100 U
b1000100 V
1!
#170000
0!
#175000
b1001100 5
b1001100 T
b1001100 W
b1001000 4
b1001000 R
b1001000 S
b1001000 U
b1001000 V
1!
#180000
0!
#185000
b1010000 5
b1010000 T
b1010000 W
b1001100 4
b1001100 R
b1001100 S
b1001100 U
b1001100 V
1!
#190000
0!
#195000
b1010100 5
b1010100 T
b1010100 W
b1010000 4
b1010000 R
b1010000 S
b1010000 U
b1010000 V
1!
#200000
0!
#202000
