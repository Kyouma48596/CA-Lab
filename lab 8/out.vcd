$date
	Thu Apr 07 15:20:53 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module processor_top_test $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$scope module proc $end
$var wire 1 # ID_RegWrite $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 5 $ WB_writereg [4:0] $end
$var wire 32 % WB_alu_res [31:0] $end
$var wire 1 & WB_RegWrite $end
$var wire 32 ' PC_out [31:0] $end
$var wire 32 ( PC_in [31:0] $end
$var wire 32 ) IF_instr [31:0] $end
$var wire 5 * ID_writereg [4:0] $end
$var wire 32 + ID_instr [31:0] $end
$var wire 32 , ID_alu_in2 [31:0] $end
$var wire 32 - ID_alu_in1 [31:0] $end
$var wire 4 . ID_ALUop [3:0] $end
$var wire 5 / EX_writereg [4:0] $end
$var wire 32 0 EX_alu_res [31:0] $end
$var wire 32 1 EX_alu_in2 [31:0] $end
$var wire 32 2 EX_alu_in1 [31:0] $end
$var wire 1 3 EX_Zero $end
$var wire 1 4 EX_RegWrite $end
$var wire 4 5 EX_ALUop [3:0] $end
$scope module alu $end
$var wire 4 6 cntrl [3:0] $end
$var wire 1 3 Zero $end
$var wire 32 7 Result [31:0] $end
$var wire 32 8 B [31:0] $end
$var wire 32 9 A [31:0] $end
$var reg 32 : res [31:0] $end
$upscope $end
$scope module contr0 $end
$var wire 1 # RegWrite $end
$var wire 4 ; funct [3:0] $end
$var wire 7 < opcode [6:0] $end
$var wire 4 = ALUop [3:0] $end
$upscope $end
$scope module file0 $end
$var wire 1 ! clk $end
$var wire 32 > read_data_1 [31:0] $end
$var wire 32 ? read_data_2 [31:0] $end
$var wire 5 @ read_reg_num_1 [4:0] $end
$var wire 5 A read_reg_num_2 [4:0] $end
$var wire 1 " rst $end
$var wire 5 B write_reg_num [4:0] $end
$var wire 32 C write_data [31:0] $end
$var wire 1 & writeReg $end
$var wire 1 D regfile_out $end
$var integer 32 E i [31:0] $end
$upscope $end
$scope module mem0 $end
$var wire 1 " reset $end
$var wire 32 F instruction_code [31:0] $end
$var wire 32 G PC [31:0] $end
$upscope $end
$scope module p1 $end
$var wire 32 H IF_instr [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var reg 32 I ID_instr [31:0] $end
$upscope $end
$scope module p2 $end
$var wire 4 J ID_ALUop [3:0] $end
$var wire 32 K ID_regdata1 [31:0] $end
$var wire 32 L ID_regdata2 [31:0] $end
$var wire 1 # ID_regwrite $end
$var wire 5 M ID_writereg [4:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var reg 4 N EX_ALUop [3:0] $end
$var reg 32 O EX_regdata1 [31:0] $end
$var reg 32 P EX_regdata2 [31:0] $end
$var reg 1 4 EX_regwrite $end
$var reg 5 Q EX_writereg [4:0] $end
$upscope $end
$scope module p3 $end
$var wire 32 R EX_ALUres [31:0] $end
$var wire 1 4 EX_regwrite $end
$var wire 5 S EX_writereg [4:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var reg 32 T WB_ALUres [31:0] $end
$var reg 1 & WB_regwrite $end
$var reg 5 U WB_writereg [4:0] $end
$upscope $end
$scope module pc0 $end
$var wire 32 V PC_out [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 W PC_in [31:0] $end
$var reg 32 X PC [31:0] $end
$upscope $end
$scope module pc_add0 $end
$var wire 32 Y pc [31:0] $end
$var wire 32 Z next [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
xD
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
x4
x3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
x&
bx %
bx $
1#
1"
0!
$end
#1000
b10 .
b10 =
b10 J
b1 ,
b1 ?
b1 L
b0 A
b1 -
b1 >
b1 K
b0 @
b0 <
b0 ;
b0 *
b0 M
1D
13
b0 0
b0 7
b0 :
b0 R
b100 (
b100 W
b100 Z
b1110000111000001100110011 )
b1110000111000001100110011 F
b1110000111000001100110011 H
b0 '
b0 G
b0 V
b0 X
b0 Y
b0 +
b0 I
b0 /
b0 Q
b0 S
b0 1
b0 8
b0 P
b0 2
b0 9
b0 O
04
b0 5
b0 6
b0 N
b0 $
b0 B
b0 U
b0 %
b0 C
b0 T
0&
b100000 E
0"
#2000
1"
#5000
03
b10 0
b10 7
b10 :
b10 R
b11100 A
b111 @
b110011 <
b110 *
b110 M
b1 1
b1 8
b1 P
b1 2
b1 9
b1 O
14
b10 5
b10 6
b10 N
b1110000111000001100110011 +
b1110000111000001100110011 I
b1000 (
b1000 W
b1000 Z
b1000001110000111000001100110011 )
b1000001110000111000001100110011 F
b1000001110000111000001100110011 H
b100 '
b100 G
b100 V
b100 X
b100 Y
1!
#10000
0!
#15000
b110 .
b110 =
b110 J
b1000 ;
b1100 (
b1100 W
b1100 Z
b1110000111111001100110011 )
b1110000111111001100110011 F
b1110000111111001100110011 H
b1000 '
b1000 G
b1000 V
b1000 X
b1000 Y
b1000001110000111000001100110011 +
b1000001110000111000001100110011 I
b110 /
b110 Q
b110 S
b10 %
b10 C
b10 T
1&
1!
#20000
0!
#25000
b0 .
b0 =
b0 J
13
b0 0
b0 7
b0 :
b0 R
b111 ;
b110 $
b110 B
b110 U
b110 5
b110 6
b110 N
b1110000111111001100110011 +
b1110000111111001100110011 I
b10000 (
b10000 W
b10000 Z
b1110000111110001100110011 )
b1110000111110001100110011 F
b1110000111110001100110011 H
b1100 '
b1100 G
b1100 V
b1100 X
b1100 Y
1!
#30000
0!
#35000
b1 .
b1 =
b1 J
b110 ;
03
b1 0
b1 7
b1 :
b1 R
b10100 (
b10100 W
b10100 Z
b1110000111001001100110011 )
b1110000111001001100110011 F
b1110000111001001100110011 H
b10000 '
b10000 G
b10000 V
b10000 X
b10000 Y
b1110000111110001100110011 +
b1110000111110001100110011 I
b0 5
b0 6
b0 N
b0 %
b0 C
b0 T
0D
1!
#40000
0!
#45000
b1001 .
b1001 =
b1001 J
b1 ;
b1 %
b1 C
b1 T
b1 5
b1 6
b1 N
b1110000111001001100110011 +
b1110000111001001100110011 I
b11000 (
b11000 W
b11000 Z
b1110000111101001100110011 )
b1110000111101001100110011 F
b1110000111101001100110011 H
b10100 '
b10100 G
b10100 V
b10100 X
b10100 Y
1!
#50000
0!
#55000
b1010 .
b1010 =
b1010 J
b101 ;
b10 0
b10 7
b10 :
b10 R
b11100 (
b11100 W
b11100 Z
bx )
bx F
bx H
b11000 '
b11000 G
b11000 V
b11000 X
b11000 Y
b1110000111101001100110011 +
b1110000111101001100110011 I
b1001 5
b1001 6
b1001 N
1D
1!
#60000
0!
#65000
bx .
bx =
bx J
13
b0 0
b0 7
b0 :
b0 R
bx ,
bx ?
bx L
bx A
bx -
bx >
bx K
bx @
bx <
bx ;
bx *
bx M
b10 %
b10 C
b10 T
b1010 5
b1010 6
b1010 N
bx +
bx I
b100000 (
b100000 W
b100000 Z
b11100 '
b11100 G
b11100 V
b11100 X
b11100 Y
1!
#70000
0!
#75000
x3
bz 0
bz 7
bz :
bz R
b100100 (
b100100 W
b100100 Z
b100000 '
b100000 G
b100000 V
b100000 X
b100000 Y
bx /
bx Q
bx S
bx 1
bx 8
bx P
bx 2
bx 9
bx O
bx 5
bx 6
bx N
b0 %
b0 C
b0 T
0D
1!
#80000
0!
#85000
bx $
bx B
bx U
bz %
bz C
bz T
b101000 (
b101000 W
b101000 Z
b100100 '
b100100 G
b100100 V
b100100 X
b100100 Y
1!
#90000
0!
#95000
b101100 (
b101100 W
b101100 Z
b101000 '
b101000 G
b101000 V
b101000 X
b101000 Y
1!
#100000
0!
#105000
b110000 (
b110000 W
b110000 Z
b101100 '
b101100 G
b101100 V
b101100 X
b101100 Y
1!
#110000
0!
#115000
b110100 (
b110100 W
b110100 Z
b110000 '
b110000 G
b110000 V
b110000 X
b110000 Y
1!
#120000
0!
#125000
b111000 (
b111000 W
b111000 Z
b110100 '
b110100 G
b110100 V
b110100 X
b110100 Y
1!
#130000
0!
#135000
b111100 (
b111100 W
b111100 Z
b111000 '
b111000 G
b111000 V
b111000 X
b111000 Y
1!
#140000
0!
#145000
b1000000 (
b1000000 W
b1000000 Z
b111100 '
b111100 G
b111100 V
b111100 X
b111100 Y
1!
#150000
0!
#155000
b1000100 (
b1000100 W
b1000100 Z
b1000000 '
b1000000 G
b1000000 V
b1000000 X
b1000000 Y
1!
#160000
0!
#165000
b1001000 (
b1001000 W
b1001000 Z
b1000100 '
b1000100 G
b1000100 V
b1000100 X
b1000100 Y
1!
#170000
0!
#175000
b1001100 (
b1001100 W
b1001100 Z
b1001000 '
b1001000 G
b1001000 V
b1001000 X
b1001000 Y
1!
#180000
0!
#185000
b1010000 (
b1010000 W
b1010000 Z
b1001100 '
b1001100 G
b1001100 V
b1001100 X
b1001100 Y
1!
#190000
0!
#195000
b1010100 (
b1010100 W
b1010100 Z
b1010000 '
b1010000 G
b1010000 V
b1010000 X
b1010000 Y
1!
#200000
0!
#202000
